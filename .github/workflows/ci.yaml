name: CI

on:
  push:
    branches: [ master, dev ]
  pull_request: {}

jobs:
  # ------------------------------------------------------------------ BACKEND
  backend-test:
    name: Backend Test & Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-java@v3
        with: { distribution: temurin, java-version: '21' }

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Start Postgres
        run: docker-compose -f backend/docker-compose.yaml up -d

      - name: Wait DB
        run: sleep 10

      - name: Run tests + JaCoCo
        working-directory: ./backend
        env:
          DATABASE_DRIVER: jdbc:postgresql
          DATABASE_HOST:  localhost
          DATABASE_PORT:  5432
          DATABASE_LOGIN: postgres
          DATABASE_PASSWORD: postgres
          DATABASE_NAME:  cvetochey
        run: mvn -B verify jacoco:report

      # ▸ coverage
      - uses: actions/upload-artifact@v4
        with:
          name: backend-cover
          path: backend/target/jacoco.exec

      # ▸ байт-код (classes)
      - uses: actions/upload-artifact@v4
        with:
          name: backend-target
          path: backend/target/**

      - name: Stop Postgres
        run: docker-compose -f backend/docker-compose.yaml down

  # ------------------------------------------------------------------ FRONTEND
  frontend-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with: { fetch-depth: 0 }

      - uses: actions/setup-node@v3
        with: { node-version: '20.11.1' }

      - working-directory: ./frontend
        run: |
          yarn install --frozen-lockfile
          yarn test --coverage --watchAll=false

      - uses: actions/upload-artifact@v4
        with:
          name: frontend-cover
          path: frontend/coverage/lcov.info

  # ------------------------------------------------------------------ SONAR
  sonar:
    runs-on: ubuntu-latest
    needs: [ backend-test, frontend-test ]

    env:                    # ← секреты видны всем step-ам job’а
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      SONAR_TOKEN:    ${{ secrets.SONAR_TOKEN }}

    steps:
      - uses: actions/checkout@v3
        with: { fetch-depth: 0 }

      # ▸ вытягиваем артефакты
      - uses: actions/download-artifact@v4
        with: { name: backend-target, path: backend/target }
      - uses: actions/download-artifact@v4
        with: { name: backend-cover,  path: backend/target }
      - uses: actions/download-artifact@v4
        with: { name: frontend-cover, path: frontend/coverage }

      # ▸ скан + ожидание Gate
      - name: Sonar Scan
        uses: SonarSource/sonarqube-scan-action@v2

      - name: Sonar Quality Gate
        uses: SonarSource/sonarqube-quality-gate-action@v1.1.0
